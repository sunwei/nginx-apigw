log_format json.oneapi.cc '$remote_addr - $remote_user [$time_local] "$request"'
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent"'
                    '"$http_x_forwarded_for" "$api_name"';
log_format upstream_logging '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';

upstream my_json {
    zone my_json_service 64k;
    server api.myjson.com:443;
}

server {
    set $api_name -;
    error_log /var/log/nginx/api_error.log notice;
    rewrite_log on;
    access_log /var/log/nginx/api_access.log json.oneapi.cc;
    
    listen HEROKU_DYNO_PORT;
    server_name localhost;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
    
    # API definitions, one per file
    location /bins/ {
        set $upstream my_json;
        rewrite ^ /_json last;
    }
    
    location = /_json {
        internal;
        proxy_ssl_server_name on;
        access_log /var/log/nginx/json_logging.log upstream_logging;

        set $api_name Warehouse;
        proxy_pass https://$upstream$request_uri;
        proxy_set_header Host            api.myjson.com;
        proxy_set_header X-Forwarded-For $remote_addr;
        
        #resolver 127.0.0.1;
        #set $backend "https://api.myjson.com:443$request_uri";
        #proxy_pass $backend;
        


    }

    # Error responses
    #error_page 404 = @400;         # Invalid paths are treated as bad requests
    #proxy_intercept_errors on;     # Do not send backend errors to the client
    #include error_page.conf;       # API client friendly JSON error responses
    default_type application/json; # If no content-type then assume JSON
}
